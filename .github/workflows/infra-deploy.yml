name: Infra + App Deploy (Terraform + ECS)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: "Type 'destroy' to tear down the stack. Leave empty to deploy."
        required: false
        default: ""
        type: string

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 097635932419.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: myapp
  CLUSTER_NAME: docker-ecs-deployment-cluster
  SERVICE_NAME: docker-ecs-deployment-svc
  IMAGE_TAG: latest
  IMAGE_SHA_TAG: ${{ github.sha }}
  TF_WORKING_DIR: infra

permissions:
  id-token: write        # OIDC for both jobs
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  terraform:
    name: Terraform plan/apply or destroy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ‚úÖ –®–∏—Ä–æ–∫–∞—è —Ä–æ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      - name: Configure AWS via OIDC (Terraform role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::097635932419:role/github-actions-terraform-role
          aws-region: ${{ env.AWS_REGION }}

      - name: WhoAmI (Terraform role)
        run: aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5

      - name: Cache Terraform dirs
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.TF_WORKING_DIR }}/.terraform
            ~/.terraform.d/plugin-cache
          key: tf-${{ runner.os }}-${{ hashFiles('**/*.tf', '**/*.tfvars', '**/.terraform.lock.hcl') }}

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
          TF_LOG: INFO
          TF_IN_AUTOMATION: 1
        run: terraform init -input=false -upgrade -no-color

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_LOG: INFO
          TF_IN_AUTOMATION: 1
        run: terraform validate -no-color

      # üî• Destroy (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)
      - name: Terraform Destroy (manual)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.action == 'destroy' }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_LOG: INFO
          TF_IN_AUTOMATION: 1
        run: terraform destroy -auto-approve -no-color

      # üõ†Ô∏è Plan + Apply (–µ—Å–ª–∏ –Ω–µ destroy)
      - name: Terraform Plan
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.action == 'destroy') }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_LOG: INFO
          TF_IN_AUTOMATION: 1
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Terraform Apply
        if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.action == 'destroy') }}
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_LOG: INFO
          TF_IN_AUTOMATION: 1
        run: terraform apply -input=false -no-color -auto-approve tfplan

  image_and_deploy:
    name: Build & Push Image, ECS Deploy
    needs: terraform
    runs-on: ubuntu-latest
    if: ${{ !(github.event_name == 'workflow_dispatch' && inputs.action == 'destroy') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # üîí –£–∑–∫–∞—è —Ä–æ–ª—å: ECR push + ECS update
      - name: Configure AWS via OIDC (ECS role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::097635932419:role/github-actions-ecs-role
          aws-region: ${{ env.AWS_REGION }}

      - name: WhoAmI (Deploy role)
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image (latest + sha)
        run: |
          docker buildx create --use --name mybuilder || true
          # Dockerfile –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª–µ–∂–∞—Ç –≤ ./infra
          docker buildx build --platform linux/amd64 \
            -f infra/Dockerfile infra \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG \
            --push

      - name: Force new ECS deployment
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment \
            --region $AWS_REGION